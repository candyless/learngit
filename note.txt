-----------------------------------------linux----------------------------------------------------------------------------------
linux环境变量种类：1、永久：需要修改配置文件，变量永久生效
                   2、临时：使用export命令声明即可，变量在关闭shell时失效。
    设置变量：1.vi /etc/profile
	            export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib
				注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效
			  2. 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】
    查看变量：1、echo $path 
	          2、env
	常用的环境变量

　　PATH 决定了shell将到哪些目录中寻找命令或程序

　　HOME 当前用户主目录

　　HISTSIZE　历史记录数

　　LOGNAME 当前用户的登录名

　　HOSTNAME　指主机的名称

　　SHELL 　　当前用户Shell类型

　　LANGUGE 　语言相关的环境变量，多语言可以修改此环境变量

　　MAIL　　　当前用户的邮件存放目录

　　PS1　　　基本提示符，对于root用户是#，对于普通用户是$


ps - ef | grep tomcat   (ps -ef 显示所有进程 grep进行筛选)
ps  参数：
     -a：显示所有终端机下执行的程序，除了阶段作业领导者之外。
     a：显示现行终端机下的所有程序，包括其他用户的程序。
     -A：显示所有程序。
     -c：显示CLS和PRI栏位。
     c：列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。
     -C<指令名称>：指定执行指令的名称，并列出该指令的程序的状况。
     -d：显示所有程序，但不包括阶段作业领导者的程序。
     -e：此选项的效果和指定"A"选项相同。
     e：列出程序时，显示每个程序所使用的环境变量。
     -f：显示UID,PPIP,C与STIME栏位。
     f：用ASCII字符显示树状结构，表达程序间的相互关系。
     -g<群组名称>：此选项的效果和指定"-G"选项相同，当亦能使用阶段作业领导者的名称来指定。
     g：显示现行终端机下的所有程序，包括群组领导者的程序。
     -G<群组识别码>：列出属于该群组的程序的状况，也可使用群组名称来指定。
     h：不显示标题列。
     -H：显示树状结构，表示程序间的相互关系。
     -j或j：采用工作控制的格式显示程序状况。
     -l或l：采用详细的格式来显示程序状况。
     L：列出栏位的相关信息。
     -m或m：显示所有的执行绪。
     n：以数字来表示USER和WCHAN栏位。
     -N：显示所有的程序，除了执行ps指令终端机下的程序之外。
     -p<程序识别码>：指定程序识别码，并列出该程序的状况。
     p<程序识别码>：此选项的效果和指定"-p"选项相同，只在列表格式方面稍有差异。
     r：只列出现行终端机正在执行中的程序。
     -s<阶段作业>：指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。
     s：采用程序信号的格式显示程序状况。
     S：列出程序时，包括已中断的子程序资料。
     -t<终端机编号>：指定终端机编号，并列出属于该终端机的程序的状况。
     t<终端机编号>：此选项的效果和指定"-t"选项相同，只在列表格式方面稍有差异。
     -T：显示现行终端机下的所有程序。
     -u<用户识别码>：此选项的效果和指定"-U"选项相同。
     u：以用户为主的格式来显示程序状况。
     -U<用户识别码>：列出属于该用户的程序的状况，也可使用用户名称来指定。
     U<用户名称>：列出属于该用户的程序的状况。
     v：采用虚拟内存的格式显示程序状况。
     -V或V：显示版本信息。
     -w或w：采用宽阔的格式来显示程序状况。　
     x：显示所有程序，不以终端机来区分。
     X：采用旧式的Linux i386登陆格式显示程序状况。
     -y：配合选项"-l"使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位　。
     -<程序识别码>：此选项的效果和指定"p"选项相同。
     --cols<每列字符数>：设置每列的最大字符数。
     --columns<每列字符数>：此选项的效果和指定"--cols"选项相同。
     --cumulative：此选项的效果和指定"S"选项相同。
     --deselect：此选项的效果和指定"-N"选项相同。
     --forest：此选项的效果和指定"f"选项相同。
     --headers：重复显示标题列。
     --help：在线帮助。
     --info：显示排错信息。
     --lines<显示列数>：设置显示画面的列数。
     --no-headers：此选项的效果和指定"h"选项相同，只在列表格式方面稍有差异。
     --group<群组名称>：此选项的效果和指定"-G"选项相同。
     --Group<群组识别码>：此选项的效果和指定"-G"选项相同。
     --pid<程序识别码>：此选项的效果和指定"-p"选项相同。
     --rows<显示列数>：此选项的效果和指定"--lines"选项相同。
     --sid<阶段作业>：此选项的效果和指定"-s"选项相同。
     --tty<终端机编号>：此选项的效果和指定"-t"选项相同。
     --user<用户名称>：此选项的效果和指定"-U"选项相同。
     --User<用户识别码>：此选项的效果和指定"-U"选项相同。
     --version：此选项的效果和指定"-V"选项相同。
     --widty<每列字符数>：此选项的效果和指定"-cols"选项相同。
	 
netstat -tunlp | grep 8000 查看端口占用情况
netstat -na | grep ESTAB | grep 8080 | wc -l linux下查看tomcat连接数
netstat 参数：
    -n: 不适用主机名称与服务名称，知使用IP和Port NUmber
    -a: 列出所有的联机状态
    -t: 仅列出TCP数据包的联机
    -u: 仅列出UDP数据包的联机
    -l: 仅列出在Listen状态的服务
    -p: 列出程序PID和程序名
    -c: 自动更新

rm -r
windows  netstat -ano 查看端口


vi 编辑  a 插入 esc 退出编辑模式   :wq 保存
./bin/start.sh  启动脚本
./bin/shutdown.sh 
tab键自动补全
telnet


top    1(详情)   q（退出）linux资源查看
top -H -p pid  线程数

跳过测试： mvn clean install -Dmaven.test.skip=true  
自动上传：mvn deploy -e -Dmaven.test.skip=true
mvn install -Dmaven.test.skip=true
-----------------------------------------linux----------------------------------------------------------------------------------


    Connect(SelectionKey.OP_CONNECT):一个channel成功连接到另一个服务器——“连接就绪”
    Accept(SelectionKey.OP_ACCEPT):一个ServerSocketchannel准备好接收新进入的连接——“接收就绪”
    Read(SelectionKey.OP_READ):一个通道的可读数据已准备好——“读就绪”
    Write(SelectionKey.OP_WRITE):一个通道的可写数据已准备好——“写就绪”
	
	
-----------------------------------------mybatis----------------------------------------------------------------------------------
mybatis插件自动生成mapper、entity、Sql映射文件：mybatis-generator:generate
   generatorConfig.xml   maven插件：<plugin>
				<groupId>org.mybatis.generator</groupId>
				<artifactId>mybatis-generator-maven-plugin</artifactId>
				<version>${mybatis.generator.version}</version>
				<configuration>
					<configurationFile>${basedir}/src/main/resources/generator/generatorConfig.xml</configurationFile>
					<overwrite>true</overwrite>
					<verbose>true</verbose>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>mysql</groupId>
						<artifactId>mysql-connector-java</artifactId>
						<version>${mysql.version}</version>
					</dependency>
					<dependency>
						<groupId>tk.mybatis</groupId>
						<artifactId>mapper</artifactId>
						<version>${mapper.version}</version>
					</dependency>
				</dependencies>
			</plugin>

-X mybatis-generator:generate -Dmybatis.generator.overwrite=true
参数映射-》sql解析-》sql执行-》结果集映射   http://www.jianshu.com/p/ec40a82cae28
-----------------------------------------mybatis----------------------------------------------------------------------------------


-----------------------------------------zookeeper----------------------------------------------------------------------------------
建立节点   create /zk  hello
获得节点  get /zk 
设置节点 set /zk hello2
建立子节点  set /zk/subzk hello3
输出节点目录 ls /zk
删除节点  delete /zk等等

5，zookeeper的四字命令
ZooKeeper 四字命令
功能描述
conf
输出相关服务配置的详细信息。

cons
列出所有连接到服务器的客户端的完全的连接 / 会话的详细信息。包括“接受 / 发送”的包数量、会话 id 、操作延迟、最后的操作执行等等信息。

dump
列出未经处理的会话和临时节点。

envi
输出关于服务环境的详细信息（区别于 conf 命令）。

reqs
列出未经处理的请求

ruok
测试服务是否处于正确状态。如果确实如此，那么服务返回“imok ”，否则不做任何相应。

stat
输出关于性能和连接的客户端的列表。

wchs
列出服务器 watch 的详细信息。

wchc
通过 session 列出服务器 watch 的详细信息，它的输出是一个与watch 相关的会话的列表。

wchp
通过路径列出服务器 watch 的详细信息。它输出一个与 session相关的路径。

java -cp ../../../zookeeper-3.4.6/zookeeper-3.4.6.jar;../../../zookeeper-3.4.6/lib/slf4j-api-1.6.1.jar org.apache.zookeeper.server.LogFormatter log.1
-----------------------------------------zookeeper----------------------------------------------------------------------------------

-----------------------------------------jvm----------------------------------------------------------------------------------
jstat
option   可以从下面参数中选择

    -class                 显示ClassLoad的相关信息；
    -compiler           显示JIT编译的相关信息；
    -gc                     显示和gc相关的堆信息；
    -gccapacity 　　  显示各个代的容量以及使用情况；
    -gccause             显示垃圾回收的相关信息（通-gcutil）,同时显示最后一次或当前正在发生的垃圾回收的诱因；
    -gcnew               显示新生代信息；
    -gcnewcapacity  显示新生代大小和使用情况；
    -gcold                 显示老年代和永久代的信息；
    -gcoldcapacity    显示老年代的大小；
    -gcpermcapacity 显示永久代的大小；
    -gcutil　　           显示垃圾收集信息；   
    -printcompilation输出JIT编译的方法信息；





jstat -gcutil pid
S0  — Heap上的 Survivor space 0 区已使用空间的百分比
S1  — Heap上的 Survivor space 1 区已使用空间的百分比
E   — Heap上的 Eden space 区已使用空间的百分比
O   — Heap上的 Old space 区已使用空间的百分比
P   — Perm space 区已使用空间的百分比
YGC — 从应用程序启动到采样时发生 Young GC 的次数
YGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)
FGC — 从应用程序启动到采样时发生 Full GC 的次数
FGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)
GCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)
-----------------------------------------jvm----------------------------------------------------------------------------------

-----------------------------------------solr----------------------------------------------------------------------------------
Solr的启动过程主要包括：
1. 获取SolrHome：分别先后通过JNDI，System property，default directory三种方式尝试获取
2. 实例化启动过程中使用的类加载器SolrResourceLoader
3. 加载solrhome下的solr.xml文件，封装为ConfigSolr
4. 实例化一个CoreContainer,通过CoreContainer来加载cores
5. 遍历SolrHome，当寻找到含有core.properties的文件夹，则作为一个core
6. 多线程加载cores
7. 加载每个core时先加载solrconfig.xml封装为SolrConfig
8. 再加载schema.xml封装为IndexSchema
9. 最后实例化SolrCore
-----------------------------------------solr----------------------------------------------------------------------------------

