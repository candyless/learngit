
-----------------------------------------windows----------------------------------------------------------------------------------
贴靠窗口：Win +左/右> Win +上/下>窗口可以变为1/4大小放置在屏幕4个角落
切换窗口：Alt + Tab（不是新的，但任务切换界面改进）

任务视图：Win + Tab（松开键盘界面不会消失）

创建新的虚拟桌面：Win + Ctrl + D
关闭当前虚拟桌面：Win + Ctrl + F4
切换虚拟桌面：Win + Ctrl +左/右
shift+f10 即可呼出右键菜单！
windows  netstat -ano 查看端口
netstat -ano | findstr ""
net start/stop 
tasklist | findstr ""
-----------------------------------------windows----------------------------------------------------------------------------------

-----------------------------------------linux----------------------------------------------------------------------------------
/         （这就是著名的根）
├── bin         (你在终端运行的大多数程序，比如cp、mv...)
├── boot         (内核放在这里，这个目录也经常被作为某个独立分区的挂载点)
│   └── grub   (grub引导程序和引导菜单就放在这里)
├── cdrom
├── dev         (存放设备文件，这里相当于一个设备管理器，由系统自动生成。视硬件环境不同变化很大)
│   ├── block
│   ├── bsg
│   ├── bus
│   ├── char
│   ├── disk         (磁盘信息，要挂载硬盘分区就要注意这里的信息喽)
│   │   ├── by-id      (硬盘分区的永久性符号链接)
│   │   ├── by-label   (按卷标识别的硬盘分区，常用于挂载)
│   │   ├── by-path   (硬盘分区的节点链接)
│   │   └── by-uuid   (按UUID识别的硬盘分区，常用于挂载)
│   ├── dri
│   ├── fd
│   ├── input
│   ├── net
│   ├── pts
│   ├── shm
│   └── snd
├── etc         (存放所有程序和系统的配制文件和全局变量，对所有用户生效，非常值得备份)
├── home         (这就是著名的home目录了，注意不是”家目录”，强烈建议把一个独立分区挂载到这里！)
│   ├── adagio   (这才是我真正的家！一般来说目录名就是帐号名，当然也可以不是，随便。命令行中用波浪线～代表这里)
│   ├── MNT      (这是我挂载其它硬盘分区的地方，你可以看到用硬盘品牌、容量或用途区分的目录名)
│   │   ├── MAX40NT1   (迈拓40G)
│   │   ├── ST160NT1   (希捷160G第一分区,下面两个类似)
│   │   ├── ST160NT2
│   │   ├── ST160SYS
│   │   ├── ST320G      (希捷320G)
│   │   │   ├── MOVIE
│   │   │   ├── MUSIC
│   │   │   └── P2P   (电驴、BT的缓冲区)
│   │   ├── ST80G      (希捷80G)
│   │   │   ├── PROGRAM
│   │   │   ├── ST80PE
│   │   │   └── YEAR
│   │   └── WD1000      (西数1T)
│   │       ├── WD2
│   │       ├── WD3
│   │       ├── WD5
│   │       ├── WD6.Lib
│   │       └── WD7
│   └── test   (我建立的另一个帐号的家目录，专门用于测试，一旦搞到无法收拾的地步，只需简单的
│                把里面的所有文件删除，就可以恢复默认。实际上你可以拥有无数个帐号)
├── lib         (所有程序共享的库文件)
├── lost+found   (磁盘扫描出现的丢失的数据)
├── media      (你在文件管理器里点击后自动挂载的分区就在这里，按卷标命名，没有卷标则按大小命名)
├── mnt         (同样用于挂载磁盘，这是最传统的位置，喜欢挂哪里随便)
├── opt         (某些特殊的程序喜欢把数据放在这里，比如JAVA)
├── proc         (当前系统所有的详细信息，这里的”文件”并不存在于硬盘中，而是在内存或缓存里，每次启动后都不一样)
├── root       (这是系统最高权威root用户的家！他是老大，所以不住在/home里，那里是草民住的)
├── sbin         (类似/bin，存放常用程序，但这里的程序都是要命的啊，比如格式化，所以只有root用户或sudo程序有权使用)
├── srv         (一些服务所要访问的文件)
├── sys         (系统的核心文件，类似/proc，不必管它)
├── tmp         (存放临时文件，所有用户均可使用，不过你要小心啊，这里的所有文件一旦重启就全没了，自动清空的)
├── usr         (你在X下使用的所有程序数据都在这里了，包括图标、manual等。所有用户都可以使用。也是最庞大的目录)
└── var         (variation，顾名思义就是变量，这里存放系统中经常变化的数据。和/tmp不同啊，很有用的地方)
    ├── backups
    ├── cache
    │   └── apt
    │        └── archives   (存放你安装的所有程序的deb包！重装系统时太有用了，一定要备份好，到时候放回来。
    │                     我建议把整儿/var单独挂载到一个独立分区，像/home一样。这样你重装好系统后，只
    │                      需要简单的把整儿分区挂载到/var就行了，省去了备份-还原的时间。要知道这些deb包
    │                      可不是几十M而已，而是有可能几百M、几个G，一来一回可够呛的。你也可以单独挂载
    │                      一个分区到/var/cache/apt/archives，其他的都不要。
    │                      当然，这样又增加了一点系统构造的复杂度，喜欢怎样请自己斟酌。)
    ├── crash
    ├── games
    ├── lib
    ├── local
    ├── lock
    ├── log      (呵呵，这里的文件是系统运行的完整记录，出了问题一定要来这里看看)
    ├── mail      (这里是存放所有用户email的地方)
    ├── opt
    ├── run
    ├── spool
    └── tmp
LVM:逻辑卷管理：Linux LVM 组织为物理卷(PV)、卷组(VG)和逻辑卷(LV)。物理卷 是物理磁盘或物理磁盘分区(比如 /dev/sdb1 或 /dev/sdc)。卷组 是物理卷的集合。卷组 可以在逻辑上划分成多个逻辑卷
    pvcreate vgcreate lvcreate lvdisplay (https://www.linuxidc.com/Linux/2018-06/152992.htm https://www.linuxidc.com/Linux/2018-11/155510.htm)
linux环境变量种类：1、永久：需要修改配置文件，变量永久生效
                   2、临时：使用export命令声明即可，变量在关闭shell时失效。
    设置变量：1.vi /etc/profile
	            export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib
				注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效
			  2. 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】
    查看变量：1、echo $path 
	          2、env
	常用的环境变量
　　PATH 决定了shell将到哪些目录中寻找命令或程序
　　HOME 当前用户主目录
　　HISTSIZE　历史记录数
　　LOGNAME 当前用户的登录名
　　HOSTNAME　指主机的名称
　　SHELL 　　当前用户Shell类型
　　LANGUGE 　语言相关的环境变量，多语言可以修改此环境变量
　　MAIL　　　当前用户的邮件存放目录
　　PS1　　　基本提示符，对于root用户是#，对于普通用户是$


ps - ef | grep tomcat   (ps -ef 显示所有进程 grep进行筛选)
ps  参数：
     -a：显示所有终端机下执行的程序，除了阶段作业领导者之外。
     a：显示现行终端机下的所有程序，包括其他用户的程序。
     -A：显示所有程序。
     -c：显示CLS和PRI栏位。
     c：列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。
     -C<指令名称>：指定执行指令的名称，并列出该指令的程序的状况。
     -d：显示所有程序，但不包括阶段作业领导者的程序。
     -e：此选项的效果和指定"A"选项相同。
     e：列出程序时，显示每个程序所使用的环境变量。
     -f：显示UID,PPIP,C与STIME栏位。
     f：用ASCII字符显示树状结构，表达程序间的相互关系。
     -g<群组名称>：此选项的效果和指定"-G"选项相同，当亦能使用阶段作业领导者的名称来指定。
     g：显示现行终端机下的所有程序，包括群组领导者的程序。
     -G<群组识别码>：列出属于该群组的程序的状况，也可使用群组名称来指定。
     h：不显示标题列。
     -H：显示树状结构，表示程序间的相互关系。
     -j或j：采用工作控制的格式显示程序状况。
     -l或l：采用详细的格式来显示程序状况。
     L：列出栏位的相关信息。
     -m或m：显示所有的执行绪。
     n：以数字来表示USER和WCHAN栏位。
     -N：显示所有的程序，除了执行ps指令终端机下的程序之外。
     -p<程序识别码>：指定程序识别码，并列出该程序的状况。
     p<程序识别码>：此选项的效果和指定"-p"选项相同，只在列表格式方面稍有差异。
     r：只列出现行终端机正在执行中的程序。
     -s<阶段作业>：指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。
     s：采用程序信号的格式显示程序状况。
     S：列出程序时，包括已中断的子程序资料。
     -t<终端机编号>：指定终端机编号，并列出属于该终端机的程序的状况。
     t<终端机编号>：此选项的效果和指定"-t"选项相同，只在列表格式方面稍有差异。
     -T：显示现行终端机下的所有程序。
     -u<用户识别码>：此选项的效果和指定"-U"选项相同。
     u：以用户为主的格式来显示程序状况。
     -U<用户识别码>：列出属于该用户的程序的状况，也可使用用户名称来指定。
     U<用户名称>：列出属于该用户的程序的状况。
     v：采用虚拟内存的格式显示程序状况。
     -V或V：显示版本信息。
     -w或w：采用宽阔的格式来显示程序状况。　
     x：显示所有程序，不以终端机来区分。
     X：采用旧式的Linux i386登陆格式显示程序状况。
     -y：配合选项"-l"使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位　。
     -<程序识别码>：此选项的效果和指定"p"选项相同。
     --cols<每列字符数>：设置每列的最大字符数。
     --columns<每列字符数>：此选项的效果和指定"--cols"选项相同。
     --cumulative：此选项的效果和指定"S"选项相同。
     --deselect：此选项的效果和指定"-N"选项相同。
     --forest：此选项的效果和指定"f"选项相同。
     --headers：重复显示标题列。
     --help：在线帮助。
     --info：显示排错信息。
     --lines<显示列数>：设置显示画面的列数。
     --no-headers：此选项的效果和指定"h"选项相同，只在列表格式方面稍有差异。
     --group<群组名称>：此选项的效果和指定"-G"选项相同。
     --Group<群组识别码>：此选项的效果和指定"-G"选项相同。
     --pid<程序识别码>：此选项的效果和指定"-p"选项相同。
     --rows<显示列数>：此选项的效果和指定"--lines"选项相同。
     --sid<阶段作业>：此选项的效果和指定"-s"选项相同。
     --tty<终端机编号>：此选项的效果和指定"-t"选项相同。
     --user<用户名称>：此选项的效果和指定"-U"选项相同。
     --User<用户识别码>：此选项的效果和指定"-U"选项相同。
     --version：此选项的效果和指定"-V"选项相同。
     --widty<每列字符数>：此选项的效果和指定"-cols"选项相同。
	 
netstat -tunlp | grep 8000 查看端口占用情况
netstat -na | grep ESTAB | grep 8080 | wc -l linux下查看tomcat连接数
netstat 参数：
    -n: 不适用主机名称与服务名称，知使用IP和Port NUmber
    -a: 列出所有的联机状态
    -t: 仅列出TCP数据包的联机
    -u: 仅列出UDP数据包的联机
    -l: 仅列出在Listen状态的服务
    -p: 列出程序PID和程序名
    -c: 自动更新

rm -r

vi 编辑  a 插入 esc 退出编辑模式   :wq 保存
./bin/start.sh  启动脚本
./bin/shutdown.sh 
tab键自动补全
telnet


top    1(详情)   q（退出）linux资源查看
top -H -p pid  线程数

查看linux版本  getconf LONG_BIT
shutdown [选项] [时间] [警告信息]
-r 关机重启
-h 关机
jdk安装：
wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u171-b11/512cd62ec5174c3487ac17c61aaa89e8/jdk-8u171-linux-x64.tar.gz

w who whami last lastlog lastb history

修改ssh连接时间 vi /etc/ssh/sshd_config ClientAliveInterval  ClientAliveCountMax  

/etc/passwd 用户信息

set ff查看编码

ln -s 创建符号连接
ln  硬链接

useradd 
passwd修改密码

Linux磁盘管理常用三个命令为df、du和fdisk。

    df：列出文件系统的整体磁盘使用量
    du：检查磁盘空间使用量
    fdisk：用于磁盘分区
du -k 查看目录占用磁盘空间大小

df -lh 查看磁盘的使用情况以及文件系统被挂载的位置

yum list installed | grep "gcc"

    tar –xvf file.tar //解压 tar包  
    tar -zxvf file.tar.gz //解压tar.gz  
    tar -jxvf file.tar.bz2   //解压 tar.bz2  
    tar –Zxvf file.tar.Z //解压tar.Z  
	
	tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成jpg.tar  
    tar –czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz  
    tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2  
    tar –cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z  
	
/etc/sysconfig/network-scripts/ifconfig-eth0 网卡文件
service network restart重启网卡

 tcpdump -n -i eth0 port 5672  输出tcp报文段信息


-----------------------------------------linux----------------------------------------------------------------------------------


    Connect(SelectionKey.OP_CONNECT):一个channel成功连接到另一个服务器——“连接就绪”
    Accept(SelectionKey.OP_ACCEPT):一个ServerSocketchannel准备好接收新进入的连接——“接收就绪”
    Read(SelectionKey.OP_READ):一个通道的可读数据已准备好——“读就绪”
    Write(SelectionKey.OP_WRITE):一个通道的可写数据已准备好——“写就绪”
	
	
-----------------------------------------mybatis----------------------------------------------------------------------------------
mybatis插件自动生成mapper、entity、Sql映射文件：mybatis-generator:generate
   generatorConfig.xml   maven插件：<plugin>
				<groupId>org.mybatis.generator</groupId>
				<artifactId>mybatis-generator-maven-plugin</artifactId>
				<version>${mybatis.generator.version}</version>
				<configuration>
					<configurationFile>${basedir}/src/main/resources/generator/generatorConfig.xml</configurationFile>
					<overwrite>true</overwrite>
					<verbose>true</verbose>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>mysql</groupId>
						<artifactId>mysql-connector-java</artifactId>
						<version>${mysql.version}</version>
					</dependency>
					<dependency>
						<groupId>tk.mybatis</groupId>
						<artifactId>mapper</artifactId>
						<version>${mapper.version}</version>
					</dependency>
				</dependencies>
			</plugin>

-X mybatis-generator:generate -Dmybatis.generator.overwrite=true
参数映射-》sql解析-》sql执行-》结果集映射   http://www.jianshu.com/p/ec40a82cae28
-----------------------------------------mybatis----------------------------------------------------------------------------------


-----------------------------------------zookeeper----------------------------------------------------------------------------------
建立节点   create /zk  hello
获得节点  get /zk 
设置节点 set /zk hello2
建立子节点  set /zk/subzk hello3
输出节点目录 ls /zk
删除节点  delete /zk等等

5，zookeeper的四字命令
ZooKeeper 四字命令
功能描述
conf
输出相关服务配置的详细信息。

cons
列出所有连接到服务器的客户端的完全的连接 / 会话的详细信息。包括“接受 / 发送”的包数量、会话 id 、操作延迟、最后的操作执行等等信息。

dump
列出未经处理的会话和临时节点。

envi
输出关于服务环境的详细信息（区别于 conf 命令）。

reqs
列出未经处理的请求

ruok
测试服务是否处于正确状态。如果确实如此，那么服务返回“imok ”，否则不做任何相应。

stat
输出关于性能和连接的客户端的列表。

wchs
列出服务器 watch 的详细信息。

wchc
通过 session 列出服务器 watch 的详细信息，它的输出是一个与watch 相关的会话的列表。

wchp
通过路径列出服务器 watch 的详细信息。它输出一个与 session相关的路径。

java -cp ../../../zookeeper-3.4.6/zookeeper-3.4.6.jar;../../../zookeeper-3.4.6/lib/slf4j-api-1.6.1.jar org.apache.zookeeper.server.LogFormatter log.1
-----------------------------------------zookeeper----------------------------------------------------------------------------------

-----------------------------------------jvm----------------------------------------------------------------------------------
jstat
option   可以从下面参数中选择

    -class                 显示ClassLoad的相关信息；
    -compiler           显示JIT编译的相关信息；
    -gc                     显示和gc相关的堆信息；
    -gccapacity 　　  显示各个代的容量以及使用情况；
    -gccause             显示垃圾回收的相关信息（通-gcutil）,同时显示最后一次或当前正在发生的垃圾回收的诱因；
    -gcnew               显示新生代信息；
    -gcnewcapacity  显示新生代大小和使用情况；
    -gcold                 显示老年代和永久代的信息；
    -gcoldcapacity    显示老年代的大小；
    -gcpermcapacity 显示永久代的大小；
    -gcutil　　           显示垃圾收集信息；   
    -printcompilation输出JIT编译的方法信息；





jstat -gcutil pid
S0  — Heap上的 Survivor space 0 区已使用空间的百分比
S1  — Heap上的 Survivor space 1 区已使用空间的百分比
E   — Heap上的 Eden space 区已使用空间的百分比
O   — Heap上的 Old space 区已使用空间的百分比
P   — Perm space 区已使用空间的百分比
YGC — 从应用程序启动到采样时发生 Young GC 的次数
YGCT– 从应用程序启动到采样时 Young GC 所用的时间(单位秒)
FGC — 从应用程序启动到采样时发生 Full GC 的次数
FGCT– 从应用程序启动到采样时 Full GC 所用的时间(单位秒)
GCT — 从应用程序启动到采样时用于垃圾回收的总时间(单位秒)
-----------------------------------------jvm----------------------------------------------------------------------------------

-----------------------------------------solr----------------------------------------------------------------------------------
Solr的启动过程主要包括：
1. 获取SolrHome：分别先后通过JNDI，System property，default directory三种方式尝试获取
2. 实例化启动过程中使用的类加载器SolrResourceLoader
3. 加载solrhome下的solr.xml文件，封装为ConfigSolr
4. 实例化一个CoreContainer,通过CoreContainer来加载cores
5. 遍历SolrHome，当寻找到含有core.properties的文件夹，则作为一个core
6. 多线程加载cores
7. 加载每个core时先加载solrconfig.xml封装为SolrConfig
8. 再加载schema.xml封装为IndexSchema
9. 最后实例化SolrCore
-----------------------------------------solr----------------------------------------------------------------------------------

-----------------------------------------rabbitmq----------------------------------------------------------------------------------
由于rabbitMq需要erlang语言的支持，在安装rabbitMq之前需要安装erlang，执行命令：

sudo apt-get install erlang-nox

 安装rabbitMq命令：

2.$ sudo apt-get update
3.$ sudo apt-get install rabbitmq-server

启动、停止、重启、状态rabbitMq命令：

启动：sudo rabbitmq-server start
关闭： sudo rabbitmq-server stop
重启： sudo rabbitmq-server restart
查看状态：sudo rabbitmqctl status


rabbtmqctl add_user 
rabbitmqctl list_vhost

-----------------------------------------rabbitmq----------------------------------------------------------------------------------

-----------------------------------------maven----------------------------------------------------------------------------------
maven命令创建项目：mvn archetype:generate -DgroupId={project-packaging} -DartifactId={project-name}-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
定制jar包入本地仓库：mvn install:install-file -Dfile=c:\kaptcha-{version}.jar -DgroupId=com.google.code -DartifactId=kaptcha -Dversion={version} -Dpackaging=jar
                   
跳过测试： mvn clean install -Dmaven.test.skip=true  
自动上传：mvn deploy -e -Dmaven.test.skip=true
mvn install -Dmaven.test.skip=true
-----------------------------------------maven----------------------------------------------------------------------------------

-----------------------------------------mysql----------------------------------------------------------------------------------
配置参数cp /usr/local/mysql/mysql/support-files/my-default.cnf /etc/my.cnf
系统服务cp /usr/local/mysql/mysql/support-files/mysql.server /etc/init.d/mysql
初始化 bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql/mysql --datadir=/usr/local/mysql/mysql/data

启动 service mysql start（bin/mysqld --user=mysql &)

登录mysql ： mysql -uroot -proot
 window重装系统后：重新安装mysql服务 mysqld --install net start mysql 
 
-----------------------------------------mysql----------------------------------------------------------------------------------

-----------------------------------------ngnix----------------------------------------------------------------------------------

/usr/local/nginx/sbin/nginx  启动
/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf  启动，载入当前配置
/usr/local/nginx/sbin/nginx -t 测试配置
/usr/local/nginx/sbin/nginx -s reload   加载配置--不是重启，但可以当重启使用
/usr/local/nginx/sbin/nginx -s stop    退出
/usr/local/nginx/sbin/nginx -s quit  保持未结束的进程后退出
/usr/local/nginx/sbin/nginx -s reopen 日志重新选择

配置文件位置：
/usr/local/nginx/conf/nginx.conf
-----------------------------------------ngnix----------------------------------------------------------------------------------


-----------------------------------------redis----------------------------------------------------------------------------------
Redis：

redis-server /usr/local/redis/redis.conf 启动redis服务，并指定配置文件
redis-cli 启动redis 客户端
pkill redis-server 关闭redis服务
redis-cli shutdown 关闭redis客户端
netstat -tunpl|grep 6379 查看redis 默认端口号6379占用情况

redis外网访问：redis.conf # bind 127.0.0.1 protected-mode no

-----------------------------------------redis----------------------------------------------------------------------------------


-----------------------------------------docker----------------------------------------------------------------------------------
https://cloud.docker.com
gravatar
centos7下安装：yum install docker
               systemctl start docker.service
               systemctl enable docker.service
			   docker version
			   docker registry: centos7 /etc/docker/daemon.json    {
                                                                     "registry-mirrors": [
                                                                     "https://registry.docker-cn.com"
docker search   
docker pull                                                                  ]
docker image ls
docker image rm
dcoker commit
Dockerfile文件 镜像上下文
docker build
docker container ls -a
docker run 
docker container logs    
docker container stop
docker container restart
docker container rm
docker container prune
Docker 提供了三种不同的方式将数据从 Docker Host 挂载到 Docker 容器，并实现数据的读取和存储：volumes、bind mounts、tmpfs 。
docker --mount
docker volume create
docker inspect

volume 的目录一般在 /var/lib/docker/volumes/&lt;volume-name&gt;下。
                                                               
			  

-----------------------------------------docker----------------------------------------------------------------------------------


-----------------------------------------git----------------------------------------------------------------------------------
git chekout --file 撤销工作区修改
git reset head file 撤销暂存区修改
git reset --hard commit_id 版本回退
-----------------------------------------git----------------------------------------------------------------------------------




