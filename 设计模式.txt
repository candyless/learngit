责任链模式:使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。
  适用场景：

    Java中，异常机制就是一个责任链模式，一个try可以对应多个catch,当第一个catch不匹配类型，则自动跳到第二个catch.

    Servlet开发中，过滤器的链式处理

    Struct2中，拦截器的调用也是典型的责任链模式

    JavaScript中，时间的冒泡和捕获机制。Java语言中，事件的处理采用观察者模式。

   